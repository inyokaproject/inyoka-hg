IMPORTANT NOTICE:  Our unittests are broken since a long time.
				   The whole system needs to be renewed and rewritten.
				   If you've enough time to do that, do it now!

				   Currently the unittests does not even run!


How To Install
--------------

Inyoka just integrates a nearly full featured test-suite. It's based on the python-module
`unittest` and on the external library `nosetest`. To get the coverage support running we need
the `coverage` module. So everything we need to do is executing `easy_install nose coverage`.
And Baam, we got it!


How To Run
----------

Well, before we can actually run it we need to setup a test database. It doesn't matter how it's called.
The name defaults to `inyoka_test` but you can use the environment variable `INYOKA_TEST_DATABASE`
to choose your own. Just create this database now.

Everything you now need to do is: `make test`
…and everything runs… or not :-)

Hint: If you run the tests the first time all migrations are called.
      So don't break this process, it just takes a bit.


How To Write
------------

This chapter is a bit more complex. But actually, writing unittests is very easy. You can read
http://code.google.com/p/python-nose/wiki/WritingTests to get a basic idea.

Our unittests are well structured and yet good documentated. Every Inyoka-Application (forum, planet etc.)
have it's own testing folder/module. There are all tests for each submodule located. So just use the
already existing infrastructure and extend it.

So let's say we wanna create a new unittest for the module `inyoka.portal.forms`. That way we
just create a new file called `tests/portal/test_portal_forms` or make it a seperate module (folder)
if all tests grow too big. In that new test file we can now add our unittests. For example::

		from tests import view

		@view('/', component='portal')
		def test_basic_index(client, tctx, ctx):
		    assert tctx['pm_count'] == 0

For more examples see existing tests or `tests/__init__.py` which is quite good documented.
